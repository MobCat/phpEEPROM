<?php
// Logic
function weekToDate($year, $week) {
	$date = new DateTime();
	// Set the date to the Monday of the specified week
	$date->setISODate($year, $week, 1);
	$startOfWeek = $date->format('Y-m-d');
	
	// Clone the date object and set it to the Sunday of the specified week
	$endOfWeekDate = clone $date;
	$endOfWeekDate->modify('+6 days');
	$endOfWeek = $endOfWeekDate->format('Y-m-d');

	return "$startOfWeek to $endOfWeek";
}

function versionLookup($dateRange, $versions) {
	list($start, $end) = explode(' to ', $dateRange);
	$startDate = new DateTime($start);
	$endDate = new DateTime($end);
	
	foreach ($versions as $version => $range) {
		list($rangeStart, $rangeEnd) = explode(' to ', $range);
		$rangeStartDate = new DateTime($rangeStart);
		$rangeEndDate = new DateTime($rangeEnd);
		
		if (($startDate >= $rangeStartDate && $startDate <= $rangeEndDate) || 
			($endDate >= $rangeStartDate && $endDate <= $rangeEndDate)) {
			return $version;
		}
	}
	return '1.6b';
}

function versionNumberLookup2($number, $lookup) {
	// Truncate the number to the first two digits
	$truncatedNumber = intdiv($number, 10);

	$keys = array_keys($lookup);
	sort($keys);
	
	// If the exact truncated number is in the array, return its value
	if (isset($lookup[$truncatedNumber])) {
		return $lookup[$truncatedNumber];
	}

	// Binary search for the closest smaller number
	$left = 0;
	$right = count($keys) - 1;
	
	while ($left <= $right) {
		$mid = intdiv($left + $right, 2);
		
		if ($keys[$mid] == $truncatedNumber) {
			return $lookup[$keys[$mid]];
		} elseif ($keys[$mid] < $truncatedNumber) {
			$left = $mid + 1;
		} else {
			$right = $mid - 1;
		}
	}

	// After the loop, $right is the largest index with a value less than $truncatedNumber
	if ($right >= 0) {
		return $lookup[$keys[$right]];
	}

	return 'No matching version found';
}

function versionNumberLookup3($row, $column, $array) {
	// Check if the row and column exist in the array
	if (isset($array[$row]) && isset($array[$row][$column])) {
		return $array[$row][$column];
	}
	return 'Unknown. '.$row .', '. $column.' is not in table. Please let us know about your version.';
}

function PCBverConvert($num) {
	if ($num <= 25) {
		return 'A38727-009';
	} elseif ($num >= 26 && $num <= 33) {
		return 'A38727-012';
	} else {
		return 'X01063-121';
	}
}

// Datasets
$FactoryCode = [
	"02" => "Mexico",
	"03" => "Hungary",
	"05" => "China",
	"06" => "Taiwan"
];

$versions = [
	'1.0'  => '2001-01-01 to 2002-10-31',
	'1.1'  => '2002-08-18 to 2003-01-25',
	'1.2'  => '2002-12-01 to 2003-03-15',
	'1.3'  => '2003-03-02 to 2003-07-26',
	'1.4'  => '2003-07-20 to 2004-04-10',
	'1.6'  => '2004-03-14 to 2004-06-09',
	'1.6b' => '2004-09-13 to 2005-08-31'
];

$lookup = [
	20 => '1.0',
	21 => '1.0',
	23 => '1.0 or 1.1',
	24 => '1.1',
	25 => '1.1',
	30 => '1.2',
	31 => '1.3',
	32 => '1.3',
	33 => '1.4',
	42 => '1.6',
	43 => '1.6b'
];

$MACLookup = [
'0050F2' => '1.0',
'000D3A' => '1.1+',
'00125A' => '1.6'
];

$array2D = [
	"204" => ["1" => '1.0', "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"],

	"242" => ["1" => '1.1', "2" => '1.1', "3" => '1.1', "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"243" => ["1" => '1.1', "2" => '1.1', "3" => '1.1', "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"244" => ["1" => '1.1', "2" => '1.1', "3" => '1.1', "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"245" => ["1" => '1.1', "2" => '1.1', "3" => '1.1', "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"246" => ["1" => '1.1', "2" => '1.1', "3" => '?',   "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"247" => ["1" => '1.1', "2" => '1.1', "3" => '?',   "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"248" => ["1" => '1.1', "2" => '?',   "3" => '?',   "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"249" => ["1" => '1.1', "2" => '1.2', "3" => '1.2', "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"250" => ["1" => '1.1', "2" => '1.2', "3" => '1.2', "4" => '1.1', "5" => "1.1", "6" => "1.1"],
	"251" => ["1" => '1.1', "2" => '1.2', "3" => '1.2', "4" => '1.1', "5" => "?",   "6" => "1.1"],
	"252" => ["1" => '1.1', "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "?",   "6" => "1.1"],
	"301" => ["1" => '1.1', "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "?",   "6" => "1.1"],
	"302" => ["1" => '1.1', "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "?",   "6" => "1.1"],
	"303" => ["1" => '1.1', "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "?",   "6" => "1.1"],
	"304" => ["1" => '1.1', "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "1.2", "6" => "1.1"],
	"305" => ["1" => '?',   "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "1.2", "6" => "?"  ],
	"306" => ["1" => '?',   "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "1.2", "6" => "?"  ],
	"307" => ["1" => '?',   "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "1.2", "6" => "?"  ],
	"308" => ["1" => '?',   "2" => '1.2', "3" => '1.2', "4" => '?',   "5" => "1.2", "6" => "1.2"],
	"309" => ["1" => '?',   "2" => '?',   "3" => '1.2', "4" => '?',   "5" => "1.2", "6" => "?"  ],
	"310" => ["1" => '?',   "2" => '1.3', "3" => '?',   "4" => '?',   "5" => "1.2", "6" => "?"  ],
	"311" => ["1" => '?',   "2" => '1.3', "3" => '1.3', "4" => '?',   "5" => "1.2", "6" => "?"  ],
	"312" => ["1" => '?',   "2" => '1.3', "3" => '1.3', "4" => '?',   "5" => "?",   "6" => "?"  ],
	"313" => ["1" => '?',   "2" => '1.3', "3" => '1.3', "4" => '?',   "5" => "?",   "6" => "?"  ],
	"314" => ["1" => '?',   "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "?"  ],
	"315" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "?"  ],
	"316" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "?"  ],
	"317" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "?"  ],
	"318" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "?"  ],
	"319" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"320" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"321" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"322" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"323" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"324" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"325" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"326" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"327" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"328" => ["1" => '1.3', "2" => '1.3', "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"329" => ["1" => '1.3', "2" => '?',   "3" => '1.3', "4" => '1.3', "5" => "1.3", "6" => "1.3"],
	"330" => ["1" => '1.3', "2" => '?',   "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"331" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"332" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"333" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"334" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"335" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"336" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"337" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"338" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"339" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"340" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"341" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"342" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"343" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"344" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"345" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"346" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"347" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"348" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"349" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"350" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"351" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"352" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"401" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"402" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"403" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"404" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"405" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"406" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"407" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"408" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"409" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"410" => ["1" => '1.4', "2" => '1.4', "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"411" => ["1" => '1.4', "2" => '?',   "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.4"],
	"412" => ["1" => '?',   "2" => '?',   "3" => '1.4', "4" => '1.4', "5" => "1.4", "6" => "1.6"],
	"413" => ["1" => '1.6', "2" => '?',   "3" => '1.4', "4" => '1.4', "5" => "?",   "6" => "1.6"],
	"414" => ["1" => '1.6', "2" => '?',   "3" => '1.4', "4" => '1.4', "5" => "1.6", "6" => "1.6"],
	"415" => ["1" => '1.6', "2" => '?',   "3" => '1.4', "4" => '1.4', "5" => "1.6", "6" => "1.6"],
	"416" => ["1" => '1.6', "2" => '?',   "3" => '?',   "4" => '?',   "5" => "1.6", "6" => "1.6"],
	"417" => ["1" => '1.6', "2" => '?',   "3" => '?',   "4" => '?',   "5" => "1.6", "6" => "1.6"],
	"418" => ["1" => '1.6', "2" => '?',   "3" => '?',   "4" => '?',   "5" => "1.6", "6" => "1.6"],
	"419" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"420" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"421" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"422" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"423" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"424" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"425" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"426" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"427" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"428" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"429" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"430" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"431" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"432" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"433" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"434" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"435" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"436" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"437" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"438" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "?",   "6" => "?"  ],
	"439" => ["1" => '?',   "2" => '?',   "3" => '?',   "4" => '?',   "5" => "1.6b","6" => "?"  ],
];


// How did we get here? 
// Then display data based on that
  if (isset($_POST['sn'])) {
	  $data = (int)substr($_POST['sn'], 0, 12); 
	  // Dirty regex, cos I dont wanna call substring 6 times.
	  if (preg_match('/^(\d)(\d{6})(\d)(\d{2})(\d{2})$/', $data, $matches)) {
		  list(, $L, $N, $Y, $W, $F) = $matches;
	  }

	  // Display
	  echo "<h1>SN Decode</h1><pre>$L$N $Y$W$F<br>LNNNNNN YWWFF</pre>
<a href=\"https://mobcat.zip/eeprom/snDecode.php?sn=$L$N$Y$W$F\" target=\"_blank\" rel=\"noopener noreferrer\">https://mobcat.zip/eeprom/snDecode.php?sn=$L$N$Y$W$F</a><br><br>
See <a href=\"https://consolemods.org/wiki/Xbox:Versions\">https://consolemods.org/wiki/Xbox:Versions</a> for more detaild mobo and console version info.<br>
See <a href=\"https://www.herringhardware.com/XboxRevisions.html\">https://www.herringhardware.com/XboxRevisions.html</a> for detaild PCB revison info.<br>
TL;DR:<br>
Mobo Ver = Xbox scene names for xbox revsions<br>
PCB  Rev = Version number of the PCB used by MS and printed on the PCB<br><br>
MFG Date: Week $W of 200$Y (".weekToDate("200$Y", $W).")<br>".
(int)$N." xbox manufactured this week<br>
Factory: $FactoryCode[$F] - Line: $L<br><br>
Mobo ver guess 1: ".versionLookup(weekToDate("200$Y", $W), $versions).
" (Basic date range)
<br>Mobo ver guess 2: ".versionNumberLookup2((int)"$Y$W", $lookup).
" (Year week lookup)
<br>Mobo ver guess 3: ".versionNumberLookup3("$Y$W", "$L", $array2D).
" (Known date chart lookup)
<br>PCB  rev guess: ".PCBverConvert("$Y$W").
" (based on year and week)";

} elseif (isset($_GET['sn'])) {
	$data = (int)substr($_GET['sn'], 0, 12); 
	// Dirty regex, cos I dont wanna call substring 6 times.
	if (preg_match('/^(\d)(\d{6})(\d)(\d{2})(\d{2})$/', $data, $matches)) {
		list(, $L, $N, $Y, $W, $F) = $matches;
	}

	$jsondata = array(
			'L' => $L,
			'N' => $N,
			'Y' => $Y,
			'W' => $W,
			'F' => $F,
			'Factory' => $FactoryCode[$F],
			'WeekLoopup' => weekToDate("200$Y", $W),
			'verLookup1' => versionLookup(weekToDate("200$Y", $W), $versions),
			'verLookup2' => versionNumberLookup2((int)"$Y$W", $lookup),
			'verLookup3' => versionNumberLookup3("$Y$W", "$L", $array2D),
			'pcbvLookup' => PCBverConvert("$Y$W")
		);

	//If embed
	if (preg_match('/(^|[\s\W])+Discordbot($|[\s\W])+/', $_SERVER['HTTP_USER_AGENT']) || isset($_SERVER['HTTP_REFERER'])) {
		$content = "MFG Date: Week $W of 200$Y ({$jsondata['WeekLoopup']})
		Factory: $FactoryCode[$F] - Line: $L
		Mobo ver guess 1: {$jsondata['verLookup1']} (Basic date range)
		Mobo ver guess 2: {$jsondata['verLookup2']} (Year week lookup)
		Mobo ver guess 3: {$jsondata['verLookup3']} (Known date chart lookup)
		PCB rev guess: {$jsondata['pcbvLookup']} (based on year and week)";
		echo("<head>
			<meta charset=\"UTF-8\">
			<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
			<meta property=\"og:type\" content=\"website\" />
			<meta property=\"og:site_name\" content=\"MobCat's Xbox SN Decoder\">
			<meta property=\"og:title\" content=\"SN: $L $N $Y $W $F\">
			<meta property=\"og:description\" content=\"".$content."\">
			<meta name=\"theme-color\" content=\"#7eb900\" /></head>");
		exit(); // No need for this, but ima do it anyway, stop discord from trying to mess with the rest of the page when there is nothing here for it.
		
	} else {
		header('Content-Type: application/json');
		echo json_encode($jsondata);
	}
	  

} else {
	  echo "Error: No SN Set<br><a href=\"./\">Go Back</a>";
}
?> 